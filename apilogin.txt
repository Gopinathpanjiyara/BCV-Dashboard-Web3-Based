import { createContext, useContext, useState } from 'react';
import { useNavigate } from 'react-router-dom';

const AuthContext = createContext();

export const useAuth = () => {
  const context = useContext(AuthContext);
  if (!context) {
    throw new Error('useAuth must be used within an AuthProvider');
  }
  return context;
};

export const AuthProvider = ({ children }) => {
  const [isAuthenticated, setIsAuthenticated] = useState(!!localStorage.getItem('isAuthenticated'));
  const [userName, setUserName] = useState(localStorage.getItem('userName') || 'John Doe');
  const navigate = useNavigate();

  // Start Login Function
  const login = async (username, password) => {
    try {
      // Default values for testing (comment these lines when not needed)
      if (username === 'testuser' && password === 'testpass') {
        localStorage.setItem('isAuthenticated', 'true');
        localStorage.setItem('userName', username);
        setIsAuthenticated(true);
        setUserName(username);
        navigate('/');
        return true;
      }

      // API request for real login
      const response = await fetch('https://your-api-url.com/login', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json'
        },
        body: JSON.stringify({ username, password })
      });

      const data = await response.json();

      if (response.ok) {
        localStorage.setItem('isAuthenticated', 'true');
        localStorage.setItem('userName', data.userName || username);
        setIsAuthenticated(true);
        setUserName(data.userName || username);
        navigate('/');
        return true;
      } else {
        alert(data.message || 'Login failed');
        return false;
      }
    } catch (error) {
      console.error('Login error:', error);
      alert('Something went wrong. Please try again.');
      return false;
    }
  };
  // End Login Function

  const logout = () => {
    localStorage.removeItem('isAuthenticated');
    localStorage.removeItem('userName');
    setIsAuthenticated(false);
    navigate('/login');
  };

  const updateUserName = (name) => {
    localStorage.setItem('userName', name);
    setUserName(name);
  };

  return (
    <AuthContext.Provider value={{ isAuthenticated, login, logout, userName, updateUserName }}>
      {children}
    </AuthContext.Provider>
  );
};
